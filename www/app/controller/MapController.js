/*
 * File: app/controller/MapController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Roadpech.controller.MapController', {
    extend: 'Ext.app.Controller',

    requires: [
        'Ext.Map'
    ],

    config: {
        markers: {
            
        },
        settings: {
            
        },
        models: [
            'Marker'
        ],
        stores: [
            'Markers'
        ],
        views: [
            'Marker',
            'MapPanel',
            'SettingsForm'
        ],

        routes: {
            'map/marker/:marker': 'viewMarker'
        },

        refs: {
            map: '#map',
            markerPanel: {
                autoCreate: true,
                selector: 'markerView',
                xtype: 'markerView'
            },
            settingsPanel: {
                selector: 'settingsform',
                xtype: 'settingsform'
            }
        },

        control: {
            "#map": {
                initialize: 'onMapInitialize',
                maprender: 'onMapMaprender',
                centerchange: 'onMapCenterChange',
                zoomchange: 'onMapZoomChange'
            },
            "button#back": {
                tap: 'onBackTap'
            },
            "button#update": {
                tap: 'onUpdateTap'
            },
            "button#settingsBack": {
                tap: 'onSettingsBackTap'
            },
            "button#settingsSave": {
                tap: 'onSettingsSaveTap'
            }
        }
    },

    onMapInitialize: function(component, eOpts) {
        var gMap = this.getMap();

        gMap.setConfig({
            mapOptions : {
                center: new google.maps.LatLng(6.79724,79.901837),
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                zoom: 15   
            }
        });




    },

    onMapMaprender: function(map, gmap, eOpts) {
        gmap = map.getMap();
        var me =  this,
            markers = Ext.getStore("markers");
        console.log("render");
        me.editModeEventListners(gmap);
        //load markers
        me.loadMarkers(map.getMap().getBounds());



        /*
        this.traficLayer = new google.maps.FusionTablesLayer({
        query: {
        select: 'LATITUDE',
        from: '1qQ4uqpGKkNzHAtLtUAargS9Uezk0fyRf9NoVJ7E'
        },
        heatmap: {
        enabled: true
        }
        });
        this.traficLayer.setMap(gmap);

        */
    },

    onMapCenterChange: function(map, gmap, center, eOpts) {
        this.loadMarkers(map.getMap().getBounds());
    },

    onMapZoomChange: function(map, gmap, zoomLevel, eOpts) {
        this.loadMarkers(map.getMap().getBounds());
    },

    onBackTap: function(button, e, eOpts) {

        this.redirectTo('map');
    },

    onUpdateTap: function(button, e, eOpts) {
        var markerPanel = this.getMarkerPanel(),
            markers = Ext.getStore('markers'),
            marker = markerPanel.getRecord(),
            values =  markerPanel.getValues();
        markerPanel.setMasked({
            xtype: 'loadmask',
            message: 'Saving'
        });
        marker.setTrafficLevel(values.traffic_level);
        this.redirectTo('map');

        markerPanel.setMasked(false);

    },

    onSettingsBackTap: function(button, e, eOpts) {
        this.redirectTo('map');
    },

    onSettingsSaveTap: function(button, e, eOpts) {
        var me = this,
            settingsPanel = me.getSettingsPanel(),
            settings = settingsPanel.getValues(),
            map = me.getMap(),
            gmap = map.getMap(),
            markers = Ext.getStore("markers");;
        this.settings = settings;
        settingsPanel.setMasked({
            xtype: 'loadmask',
            message: 'Saving'
        });


        if (settings.addItem){
            //Map click event
            this.addEventListner = google.maps.event.addListener(gmap, 'click', function(e){
                var options = {
                    lat : e.latLng.lat(), 
                    lng : e.latLng.lng()
                };
                var marker = Ext.create('Roadpech.model.Marker', options);
                markers.add(marker);
                me.addMarker(marker, {
                    draggable: true,
                    icon : "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=3|69FE96"
                });
            });  
        }else{
            if (this.addEventListner){
                google.maps.event.removeListener(this.addEventListner);
            }
        }
        /*
        console.log(map);
        if(settings.curLocation){
        map.useCurrentLocation(true);
        }else{
        map.useCurrentLocation(false);
        }
        */
        this.redirectTo('map');
        settingsPanel.setMasked(false);
    },

    editModeEventListners: function(gmap) {
        var settings = this.getSettings();
        if (settings.addItem){
            //Map click event
            this.addEventListner = google.maps.event.addListener(gmap, 'click', function(e){
                var options = {
                    lat : e.latLng.lat(), 
                    lng : e.latLng.lng()
                };
                var marker = Ext.create('Roadpech.model.Marker', options);
                markers.add(marker);
                me.addMarker(marker, {
                    draggable: true,
                    icon : "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=3|69FE96"
                });
            });  
        }else{
            if (this.addEventListner){
                google.maps.event.removeListener(this.addEventListner);
            }
        }
    },

    addMarker: function(marker, gmOptions) {
        var pos = new google.maps.LatLng(marker.get('lat'), marker.get('lng')),
            hash = pos.toString(),    
            me = this,
            markersHash = this.getMarkers();

        if (markersHash[hash]) return;


        gmOptions = (gmOptions)? gmOptions : {};
        var level = marker.get('traffic_level');
        var gmReqOptions = {
            map: this.getMap().getMap(),
            animation: google.maps.Animation.DROP,
            position: pos,
            icon : "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld="+level+"|FE7569"    
        };

        Ext.Object.merge(gmReqOptions, gmOptions);

        gMarker= new google.maps.Marker(gmReqOptions);
        marker.setMapMarker(gMarker);

        //onMarkerClick
        google.maps.event.addListener(gMarker, 'click', function(){
            me.redirectTo('map/'+marker.toUrl());
        });  


        //onMarkerDrag
        google.maps.event.addListener(gMarker, 'dragend', function(e){
            marker.setLocation(e.latLng);
        });  


        markersHash[hash]  = gMarker;

    },

    updateMarker: function(marker) {
        var pos = new google.maps.LatLng(marker.get('lat'), marker.get('lng')),
            hash = pos.toString();

        if (!markersHash[hash]) return;

        markersHash[hash].setMap(null);
        unset(markersHash[hash]);
        this.addMarker(marker);


    },

    loadMarkers: function(bound) {
        var markers = Ext.getStore('markers');
        var me = this;
        Ext.each(markers.getData().items, function(marker){
            me.addMarker(marker);
        });

    },

    viewMarker: function(marker) {
        var marker =  Ext.getStore('markers').getById(marker),
            markerPanel = this.getMarkerPanel();

        markerPanel.setRecord(marker);
        Ext.Viewport.setActiveItem(markerPanel);

        if (marker) {
            markerPanel.setRecord(marker);
            Ext.Viewport.setActiveItem(markerPanel);
        }else{
            Ext.Msg.alert('Error', 'Marker not found');
            this.redirectTo('map');
        }
    }

});